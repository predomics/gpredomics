<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="9821"><g><title>gpredomics`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="0.0000%" y="213" width="0.0102%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>gpredomics`core::hash::BuildHasher::hash_one (1 samples, 0.01%)</title><rect x="0.0102%" y="213" width="0.0102%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2602%" y="223.50"></text></g><g><title>gpredomics`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.01%)</title><rect x="0.0204%" y="213" width="0.0102%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.2704%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="0.0305%" y="197" width="0.0204%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="2"/><text x="0.2805%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (5 samples, 0.05%)</title><rect x="0.0713%" y="181" width="0.0509%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="5"/><text x="0.3213%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (3 samples, 0.03%)</title><rect x="0.1222%" y="181" width="0.0305%" height="15" fill="rgb(232,128,0)" fg:x="12" fg:w="3"/><text x="0.3722%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.03%)</title><rect x="0.1222%" y="165" width="0.0305%" height="15" fill="rgb(207,160,47)" fg:x="12" fg:w="3"/><text x="0.3722%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (12 samples, 0.12%)</title><rect x="0.0509%" y="197" width="0.1222%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="12"/><text x="0.3009%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (2 samples, 0.02%)</title><rect x="0.1527%" y="181" width="0.0204%" height="15" fill="rgb(218,30,26)" fg:x="15" fg:w="2"/><text x="0.4027%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.02%)</title><rect x="0.1527%" y="165" width="0.0204%" height="15" fill="rgb(220,122,19)" fg:x="15" fg:w="2"/><text x="0.4027%" y="175.50"></text></g><g><title>gpredomics`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;gpredomics::individual::Individual&gt;&gt; (15 samples, 0.15%)</title><rect x="0.0305%" y="213" width="0.1527%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="15"/><text x="0.2805%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (1 samples, 0.01%)</title><rect x="0.1731%" y="197" width="0.0102%" height="15" fill="rgb(240,193,28)" fg:x="17" fg:w="1"/><text x="0.4231%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.01%)</title><rect x="0.1731%" y="181" width="0.0102%" height="15" fill="rgb(216,20,37)" fg:x="17" fg:w="1"/><text x="0.4231%" y="191.50"></text></g><g><title>gpredomics`core::hash::BuildHasher::hash_one (1 samples, 0.01%)</title><rect x="0.1833%" y="197" width="0.0102%" height="15" fill="rgb(206,188,39)" fg:x="18" fg:w="1"/><text x="0.4333%" y="207.50"></text></g><g><title>gpredomics`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2 samples, 0.02%)</title><rect x="0.1935%" y="197" width="0.0204%" height="15" fill="rgb(217,207,13)" fg:x="19" fg:w="2"/><text x="0.4435%" y="207.50"></text></g><g><title>gpredomics`core::num::dec2flt::parse::parse_number (2 samples, 0.02%)</title><rect x="0.1935%" y="181" width="0.0204%" height="15" fill="rgb(231,73,38)" fg:x="19" fg:w="2"/><text x="0.4435%" y="191.50"></text></g><g><title>gpredomics`core::str::iter::SplitInternal&lt;P&gt;::next (5 samples, 0.05%)</title><rect x="0.2138%" y="197" width="0.0509%" height="15" fill="rgb(225,20,46)" fg:x="21" fg:w="5"/><text x="0.4638%" y="207.50"></text></g><g><title>gpredomics`core::slice::memchr::memchr_aligned (5 samples, 0.05%)</title><rect x="0.2138%" y="181" width="0.0509%" height="15" fill="rgb(210,31,41)" fg:x="21" fg:w="5"/><text x="0.4638%" y="191.50"></text></g><g><title>gpredomics`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="0.3157%" y="181" width="0.0305%" height="15" fill="rgb(221,200,47)" fg:x="31" fg:w="3"/><text x="0.5657%" y="191.50"></text></g><g><title>gpredomics`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="0.4073%" y="165" width="0.0305%" height="15" fill="rgb(226,26,5)" fg:x="40" fg:w="3"/><text x="0.6573%" y="175.50"></text></g><g><title>gpredomics`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (19 samples, 0.19%)</title><rect x="0.2647%" y="197" width="0.1935%" height="15" fill="rgb(249,33,26)" fg:x="26" fg:w="19"/><text x="0.5147%" y="207.50"></text></g><g><title>gpredomics`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11 samples, 0.11%)</title><rect x="0.3462%" y="181" width="0.1120%" height="15" fill="rgb(235,183,28)" fg:x="34" fg:w="11"/><text x="0.5962%" y="191.50"></text></g><g><title>gpredomics`core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="0.4378%" y="165" width="0.0204%" height="15" fill="rgb(221,5,38)" fg:x="43" fg:w="2"/><text x="0.6878%" y="175.50"></text></g><g><title>gpredomics`std::fs::OpenOptions::_open (1 samples, 0.01%)</title><rect x="0.4582%" y="197" width="0.0102%" height="15" fill="rgb(247,18,42)" fg:x="45" fg:w="1"/><text x="0.7082%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.01%)</title><rect x="0.4582%" y="181" width="0.0102%" height="15" fill="rgb(241,131,45)" fg:x="45" fg:w="1"/><text x="0.7082%" y="191.50"></text></g><g><title>gpredomics`std::io::append_to_string (1 samples, 0.01%)</title><rect x="0.4684%" y="197" width="0.0102%" height="15" fill="rgb(249,31,29)" fg:x="46" fg:w="1"/><text x="0.7184%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.01%)</title><rect x="0.4684%" y="181" width="0.0102%" height="15" fill="rgb(225,111,53)" fg:x="46" fg:w="1"/><text x="0.7184%" y="191.50"></text></g><g><title>gpredomics`gpredomics::data::Data::load_data (30 samples, 0.31%)</title><rect x="0.1833%" y="213" width="0.3055%" height="15" fill="rgb(238,160,17)" fg:x="18" fg:w="30"/><text x="0.4333%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.01%)</title><rect x="0.4786%" y="197" width="0.0102%" height="15" fill="rgb(214,148,48)" fg:x="47" fg:w="1"/><text x="0.7286%" y="207.50"></text></g><g><title>gpredomics`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="0.6313%" y="197" width="0.0407%" height="15" fill="rgb(232,36,49)" fg:x="62" fg:w="4"/><text x="0.8813%" y="207.50"></text></g><g><title>gpredomics`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="0.7128%" y="181" width="0.0204%" height="15" fill="rgb(209,103,24)" fg:x="70" fg:w="2"/><text x="0.9628%" y="191.50"></text></g><g><title>gpredomics`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.07%)</title><rect x="0.6720%" y="197" width="0.0713%" height="15" fill="rgb(229,88,8)" fg:x="66" fg:w="7"/><text x="0.9220%" y="207.50"></text></g><g><title>gpredomics`core::hash::BuildHasher::hash_one (1 samples, 0.01%)</title><rect x="0.7331%" y="181" width="0.0102%" height="15" fill="rgb(213,181,19)" fg:x="72" fg:w="1"/><text x="0.9831%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="0.7433%" y="133" width="0.0102%" height="15" fill="rgb(254,191,54)" fg:x="73" fg:w="1"/><text x="0.9933%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.01%)</title><rect x="0.7535%" y="133" width="0.0102%" height="15" fill="rgb(241,83,37)" fg:x="74" fg:w="1"/><text x="1.0035%" y="143.50"></text></g><g><title>gpredomics`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 0.03%)</title><rect x="0.7433%" y="197" width="0.0305%" height="15" fill="rgb(233,36,39)" fg:x="73" fg:w="3"/><text x="0.9933%" y="207.50"></text></g><g><title>gpredomics`alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="0.7433%" y="181" width="0.0305%" height="15" fill="rgb(226,3,54)" fg:x="73" fg:w="3"/><text x="0.9933%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.03%)</title><rect x="0.7433%" y="165" width="0.0305%" height="15" fill="rgb(245,192,40)" fg:x="73" fg:w="3"/><text x="0.9933%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 0.03%)</title><rect x="0.7433%" y="149" width="0.0305%" height="15" fill="rgb(238,167,29)" fg:x="73" fg:w="3"/><text x="0.9933%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.01%)</title><rect x="0.7637%" y="133" width="0.0102%" height="15" fill="rgb(232,182,51)" fg:x="75" fg:w="1"/><text x="1.0137%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="0.7637%" y="117" width="0.0102%" height="15" fill="rgb(231,60,39)" fg:x="75" fg:w="1"/><text x="1.0137%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.01%)</title><rect x="0.7637%" y="101" width="0.0102%" height="15" fill="rgb(208,69,12)" fg:x="75" fg:w="1"/><text x="1.0137%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.01%)</title><rect x="0.7637%" y="85" width="0.0102%" height="15" fill="rgb(235,93,37)" fg:x="75" fg:w="1"/><text x="1.0137%" y="95.50"></text></g><g><title>gpredomics`core::hash::BuildHasher::hash_one (9 samples, 0.09%)</title><rect x="0.7739%" y="197" width="0.0916%" height="15" fill="rgb(213,116,39)" fg:x="76" fg:w="9"/><text x="1.0239%" y="207.50"></text></g><g><title>gpredomics`core::slice::sort::stable::driftsort_main (5 samples, 0.05%)</title><rect x="0.8655%" y="197" width="0.0509%" height="15" fill="rgb(222,207,29)" fg:x="85" fg:w="5"/><text x="1.1155%" y="207.50"></text></g><g><title>gpredomics`core::slice::sort::stable::drift::sort (5 samples, 0.05%)</title><rect x="0.8655%" y="181" width="0.0509%" height="15" fill="rgb(206,96,30)" fg:x="85" fg:w="5"/><text x="1.1155%" y="191.50"></text></g><g><title>gpredomics`core::slice::sort::stable::quicksort::quicksort (3 samples, 0.03%)</title><rect x="0.8859%" y="165" width="0.0305%" height="15" fill="rgb(218,138,4)" fg:x="87" fg:w="3"/><text x="1.1359%" y="175.50"></text></g><g><title>gpredomics`core::slice::sort::stable::quicksort::quicksort (1 samples, 0.01%)</title><rect x="0.9062%" y="149" width="0.0102%" height="15" fill="rgb(250,191,14)" fg:x="89" fg:w="1"/><text x="1.1562%" y="159.50"></text></g><g><title>gpredomics`core::slice::sort::stable::quicksort::quicksort (1 samples, 0.01%)</title><rect x="0.9062%" y="133" width="0.0102%" height="15" fill="rgb(239,60,40)" fg:x="89" fg:w="1"/><text x="1.1562%" y="143.50"></text></g><g><title>gpredomics`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.06%)</title><rect x="1.1404%" y="165" width="0.0611%" height="15" fill="rgb(206,27,48)" fg:x="112" fg:w="6"/><text x="1.3904%" y="175.50"></text></g><g><title>gpredomics`core::hash::BuildHasher::hash_one (10 samples, 0.10%)</title><rect x="1.2015%" y="165" width="0.1018%" height="15" fill="rgb(225,35,8)" fg:x="118" fg:w="10"/><text x="1.4515%" y="175.50"></text></g><g><title>gpredomics`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.14%)</title><rect x="1.3950%" y="149" width="0.1426%" height="15" fill="rgb(250,213,24)" fg:x="137" fg:w="14"/><text x="1.6450%" y="159.50"></text></g><g><title>gpredomics`core::hash::BuildHasher::hash_one (10 samples, 0.10%)</title><rect x="1.5375%" y="149" width="0.1018%" height="15" fill="rgb(247,123,22)" fg:x="151" fg:w="10"/><text x="1.7875%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.01%)</title><rect x="1.6495%" y="133" width="0.0102%" height="15" fill="rgb(231,138,38)" fg:x="162" fg:w="1"/><text x="1.8995%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.01%)</title><rect x="1.6495%" y="117" width="0.0102%" height="15" fill="rgb(231,145,46)" fg:x="162" fg:w="1"/><text x="1.8995%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.02%)</title><rect x="1.6597%" y="117" width="0.0204%" height="15" fill="rgb(251,118,11)" fg:x="163" fg:w="2"/><text x="1.9097%" y="127.50"></text></g><g><title>gpredomics`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (40 samples, 0.41%)</title><rect x="1.3033%" y="165" width="0.4073%" height="15" fill="rgb(217,147,25)" fg:x="128" fg:w="40"/><text x="1.5533%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.07%)</title><rect x="1.6393%" y="149" width="0.0713%" height="15" fill="rgb(247,81,37)" fg:x="161" fg:w="7"/><text x="1.8893%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.05%)</title><rect x="1.6597%" y="133" width="0.0509%" height="15" fill="rgb(209,12,38)" fg:x="163" fg:w="5"/><text x="1.9097%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.03%)</title><rect x="1.6801%" y="117" width="0.0305%" height="15" fill="rgb(227,1,9)" fg:x="165" fg:w="3"/><text x="1.9301%" y="127.50"></text></g><g><title>gpredomics`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (74 samples, 0.75%)</title><rect x="1.0182%" y="181" width="0.7535%" height="15" fill="rgb(248,47,43)" fg:x="100" fg:w="74"/><text x="1.2682%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (6 samples, 0.06%)</title><rect x="1.7106%" y="165" width="0.0611%" height="15" fill="rgb(221,10,30)" fg:x="168" fg:w="6"/><text x="1.9606%" y="175.50"></text></g><g><title>gpredomics`gpredomics::ga::cross_over (85 samples, 0.87%)</title><rect x="0.9164%" y="197" width="0.8655%" height="15" fill="rgb(210,229,1)" fg:x="90" fg:w="85"/><text x="1.1664%" y="207.50"></text></g><g><title>gpredomics`rand::rng::Rng::gen_range (1 samples, 0.01%)</title><rect x="1.7717%" y="181" width="0.0102%" height="15" fill="rgb(222,148,37)" fg:x="174" fg:w="1"/><text x="2.0217%" y="191.50"></text></g><g><title>gpredomics`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.09%)</title><rect x="2.4132%" y="181" width="0.0916%" height="15" fill="rgb(234,67,33)" fg:x="237" fg:w="9"/><text x="2.6632%" y="191.50"></text></g><g><title>gpredomics`core::hash::BuildHasher::hash_one (7 samples, 0.07%)</title><rect x="2.5048%" y="181" width="0.0713%" height="15" fill="rgb(247,98,35)" fg:x="246" fg:w="7"/><text x="2.7548%" y="191.50"></text></g><g><title>gpredomics`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="2.6372%" y="165" width="0.0204%" height="15" fill="rgb(247,138,52)" fg:x="259" fg:w="2"/><text x="2.8872%" y="175.50"></text></g><g><title>gpredomics`core::hash::BuildHasher::hash_one (1 samples, 0.01%)</title><rect x="2.6576%" y="165" width="0.0102%" height="15" fill="rgb(213,79,30)" fg:x="261" fg:w="1"/><text x="2.9076%" y="175.50"></text></g><g><title>gpredomics`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="2.6779%" y="149" width="0.0102%" height="15" fill="rgb(246,177,23)" fg:x="263" fg:w="1"/><text x="2.9279%" y="159.50"></text></g><g><title>gpredomics`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (13 samples, 0.13%)</title><rect x="2.5761%" y="181" width="0.1324%" height="15" fill="rgb(230,62,27)" fg:x="253" fg:w="13"/><text x="2.8261%" y="191.50"></text></g><g><title>gpredomics`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.04%)</title><rect x="2.6678%" y="165" width="0.0407%" height="15" fill="rgb(216,154,8)" fg:x="262" fg:w="4"/><text x="2.9178%" y="175.50"></text></g><g><title>gpredomics`core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="2.6881%" y="149" width="0.0204%" height="15" fill="rgb(244,35,45)" fg:x="264" fg:w="2"/><text x="2.9381%" y="159.50"></text></g><g><title>gpredomics`rand::seq::index::sample_inplace (10 samples, 0.10%)</title><rect x="2.7085%" y="181" width="0.1018%" height="15" fill="rgb(251,115,12)" fg:x="266" fg:w="10"/><text x="2.9585%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="2.7899%" y="165" width="0.0204%" height="15" fill="rgb(240,54,50)" fg:x="274" fg:w="2"/><text x="3.0399%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="2.7899%" y="149" width="0.0204%" height="15" fill="rgb(233,84,52)" fg:x="274" fg:w="2"/><text x="3.0399%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.02%)</title><rect x="2.7899%" y="133" width="0.0204%" height="15" fill="rgb(207,117,47)" fg:x="274" fg:w="2"/><text x="3.0399%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.01%)</title><rect x="2.8001%" y="117" width="0.0102%" height="15" fill="rgb(249,43,39)" fg:x="275" fg:w="1"/><text x="3.0501%" y="127.50"></text></g><g><title>gpredomics`rand_core::block::BlockRng&lt;R&gt;::generate_and_set (9 samples, 0.09%)</title><rect x="2.8103%" y="181" width="0.0916%" height="15" fill="rgb(209,38,44)" fg:x="276" fg:w="9"/><text x="3.0603%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.01%)</title><rect x="2.9019%" y="149" width="0.0102%" height="15" fill="rgb(236,212,23)" fg:x="285" fg:w="1"/><text x="3.1519%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.02%)</title><rect x="2.9019%" y="181" width="0.0204%" height="15" fill="rgb(242,79,21)" fg:x="285" fg:w="2"/><text x="3.1519%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.02%)</title><rect x="2.9019%" y="165" width="0.0204%" height="15" fill="rgb(211,96,35)" fg:x="285" fg:w="2"/><text x="3.1519%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="2.9121%" y="149" width="0.0102%" height="15" fill="rgb(253,215,40)" fg:x="286" fg:w="1"/><text x="3.1621%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="2.9223%" y="181" width="0.0102%" height="15" fill="rgb(211,81,21)" fg:x="287" fg:w="1"/><text x="3.1723%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.01%)</title><rect x="2.9223%" y="165" width="0.0102%" height="15" fill="rgb(208,190,38)" fg:x="287" fg:w="1"/><text x="3.1723%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.01%)</title><rect x="2.9223%" y="149" width="0.0102%" height="15" fill="rgb(235,213,38)" fg:x="287" fg:w="1"/><text x="3.1723%" y="159.50"></text></g><g><title>gpredomics`gpredomics::ga::mutate (114 samples, 1.16%)</title><rect x="1.7819%" y="197" width="1.1608%" height="15" fill="rgb(237,122,38)" fg:x="175" fg:w="114"/><text x="2.0319%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="2.9325%" y="181" width="0.0102%" height="15" fill="rgb(244,218,35)" fg:x="288" fg:w="1"/><text x="3.1825%" y="191.50"></text></g><g><title>gpredomics`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="2.9427%" y="181" width="0.0102%" height="15" fill="rgb(240,68,47)" fg:x="289" fg:w="1"/><text x="3.1927%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.01%)</title><rect x="2.9427%" y="165" width="0.0102%" height="15" fill="rgb(210,16,53)" fg:x="289" fg:w="1"/><text x="3.1927%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.01%)</title><rect x="2.9427%" y="149" width="0.0102%" height="15" fill="rgb(235,124,12)" fg:x="289" fg:w="1"/><text x="3.1927%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.01%)</title><rect x="2.9427%" y="133" width="0.0102%" height="15" fill="rgb(224,169,11)" fg:x="289" fg:w="1"/><text x="3.1927%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.01%)</title><rect x="2.9529%" y="165" width="0.0102%" height="15" fill="rgb(250,166,2)" fg:x="290" fg:w="1"/><text x="3.2029%" y="175.50"></text></g><g><title>gpredomics`gpredomics::individual::Individual::clone (3 samples, 0.03%)</title><rect x="2.9427%" y="197" width="0.0305%" height="15" fill="rgb(242,216,29)" fg:x="289" fg:w="3"/><text x="3.1927%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="2.9529%" y="181" width="0.0204%" height="15" fill="rgb(230,116,27)" fg:x="290" fg:w="2"/><text x="3.2029%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.01%)</title><rect x="2.9630%" y="165" width="0.0102%" height="15" fill="rgb(228,99,48)" fg:x="291" fg:w="1"/><text x="3.2130%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.01%)</title><rect x="2.9630%" y="149" width="0.0102%" height="15" fill="rgb(253,11,6)" fg:x="291" fg:w="1"/><text x="3.2130%" y="159.50"></text></g><g><title>gpredomics`gpredomics::population::Population::add (2 samples, 0.02%)</title><rect x="2.9732%" y="197" width="0.0204%" height="15" fill="rgb(247,143,39)" fg:x="292" fg:w="2"/><text x="3.2232%" y="207.50"></text></g><g><title>gpredomics`core::hash::BuildHasher::hash_one (845 samples, 8.60%)</title><rect x="2.9936%" y="181" width="8.6040%" height="15" fill="rgb(236,97,10)" fg:x="294" fg:w="845"/><text x="3.2436%" y="191.50">gpredomics`c..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="12.1984%" y="101" width="0.0102%" height="15" fill="rgb(233,208,19)" fg:x="1198" fg:w="1"/><text x="12.4484%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.01%)</title><rect x="12.2085%" y="101" width="0.0102%" height="15" fill="rgb(216,164,2)" fg:x="1199" fg:w="1"/><text x="12.4585%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="12.2289%" y="85" width="0.0102%" height="15" fill="rgb(220,129,5)" fg:x="1201" fg:w="1"/><text x="12.4789%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="12.2391%" y="85" width="0.0102%" height="15" fill="rgb(242,17,10)" fg:x="1202" fg:w="1"/><text x="12.4891%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.01%)</title><rect x="12.2391%" y="69" width="0.0102%" height="15" fill="rgb(242,107,0)" fg:x="1202" fg:w="1"/><text x="12.4891%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.01%)</title><rect x="12.2391%" y="53" width="0.0102%" height="15" fill="rgb(251,28,31)" fg:x="1202" fg:w="1"/><text x="12.4891%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.04%)</title><rect x="12.2187%" y="101" width="0.0407%" height="15" fill="rgb(233,223,10)" fg:x="1200" fg:w="4"/><text x="12.4687%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="12.2493%" y="85" width="0.0102%" height="15" fill="rgb(215,21,27)" fg:x="1203" fg:w="1"/><text x="12.4993%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.01%)</title><rect x="12.2900%" y="85" width="0.0102%" height="15" fill="rgb(232,23,21)" fg:x="1207" fg:w="1"/><text x="12.5400%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.05%)</title><rect x="12.2594%" y="101" width="0.0509%" height="15" fill="rgb(244,5,23)" fg:x="1204" fg:w="5"/><text x="12.5094%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="12.3002%" y="85" width="0.0102%" height="15" fill="rgb(226,81,46)" fg:x="1208" fg:w="1"/><text x="12.5502%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.01%)</title><rect x="12.3002%" y="69" width="0.0102%" height="15" fill="rgb(247,70,30)" fg:x="1208" fg:w="1"/><text x="12.5502%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (15 samples, 0.15%)</title><rect x="12.1984%" y="133" width="0.1527%" height="15" fill="rgb(212,68,19)" fg:x="1198" fg:w="15"/><text x="12.4484%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (15 samples, 0.15%)</title><rect x="12.1984%" y="117" width="0.1527%" height="15" fill="rgb(240,187,13)" fg:x="1198" fg:w="15"/><text x="12.4484%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.04%)</title><rect x="12.3104%" y="101" width="0.0407%" height="15" fill="rgb(223,113,26)" fg:x="1209" fg:w="4"/><text x="12.5604%" y="111.50"></text></g><g><title>gpredomics`alloc::raw_vec::finish_grow (16 samples, 0.16%)</title><rect x="12.1984%" y="149" width="0.1629%" height="15" fill="rgb(206,192,2)" fg:x="1198" fg:w="16"/><text x="12.4484%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.01%)</title><rect x="12.3511%" y="133" width="0.0102%" height="15" fill="rgb(241,108,4)" fg:x="1213" fg:w="1"/><text x="12.6011%" y="143.50"></text></g><g><title>gpredomics`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20 samples, 0.20%)</title><rect x="12.1678%" y="165" width="0.2036%" height="15" fill="rgb(247,173,49)" fg:x="1195" fg:w="20"/><text x="12.4178%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.01%)</title><rect x="12.3613%" y="149" width="0.0102%" height="15" fill="rgb(224,114,35)" fg:x="1214" fg:w="1"/><text x="12.6113%" y="159.50"></text></g><g><title>gpredomics`core::slice::sort::shared::smallsort::sort8_stable (3 samples, 0.03%)</title><rect x="12.3714%" y="149" width="0.0305%" height="15" fill="rgb(245,159,27)" fg:x="1215" fg:w="3"/><text x="12.6214%" y="159.50"></text></g><g><title>gpredomics`core::slice::sort::stable::drift::sort (21 samples, 0.21%)</title><rect x="12.4020%" y="149" width="0.2138%" height="15" fill="rgb(245,172,44)" fg:x="1218" fg:w="21"/><text x="12.6520%" y="159.50"></text></g><g><title>gpredomics`core::slice::sort::shared::pivot::median3_rec (1 samples, 0.01%)</title><rect x="12.8093%" y="133" width="0.0102%" height="15" fill="rgb(236,23,11)" fg:x="1258" fg:w="1"/><text x="13.0593%" y="143.50"></text></g><g><title>gpredomics`core::slice::sort::shared::smallsort::sort8_stable (1 samples, 0.01%)</title><rect x="12.8195%" y="133" width="0.0102%" height="15" fill="rgb(205,117,38)" fg:x="1259" fg:w="1"/><text x="13.0695%" y="143.50"></text></g><g><title>gpredomics`core::slice::sort::shared::smallsort::sort8_stable (3 samples, 0.03%)</title><rect x="13.1148%" y="117" width="0.0305%" height="15" fill="rgb(237,72,25)" fg:x="1288" fg:w="3"/><text x="13.3648%" y="127.50"></text></g><g><title>gpredomics`core::slice::sort::shared::smallsort::sort8_stable (2 samples, 0.02%)</title><rect x="13.3591%" y="101" width="0.0204%" height="15" fill="rgb(244,70,9)" fg:x="1312" fg:w="2"/><text x="13.6091%" y="111.50"></text></g><g><title>gpredomics`core::slice::sort::shared::smallsort::sort8_stable (1 samples, 0.01%)</title><rect x="13.4610%" y="85" width="0.0102%" height="15" fill="rgb(217,125,39)" fg:x="1322" fg:w="1"/><text x="13.7110%" y="95.50"></text></g><g><title>gpredomics`core::slice::sort::stable::quicksort::quicksort (13 samples, 0.13%)</title><rect x="13.3795%" y="101" width="0.1324%" height="15" fill="rgb(235,36,10)" fg:x="1314" fg:w="13"/><text x="13.6295%" y="111.50"></text></g><g><title>gpredomics`core::slice::sort::stable::quicksort::quicksort (4 samples, 0.04%)</title><rect x="13.4711%" y="85" width="0.0407%" height="15" fill="rgb(251,123,47)" fg:x="1323" fg:w="4"/><text x="13.7211%" y="95.50"></text></g><g><title>gpredomics`core::slice::sort::stable::quicksort::quicksort (1 samples, 0.01%)</title><rect x="13.5017%" y="69" width="0.0102%" height="15" fill="rgb(221,13,13)" fg:x="1326" fg:w="1"/><text x="13.7517%" y="79.50"></text></g><g><title>gpredomics`core::slice::sort::stable::quicksort::quicksort (1 samples, 0.01%)</title><rect x="13.5017%" y="53" width="0.0102%" height="15" fill="rgb(238,131,9)" fg:x="1326" fg:w="1"/><text x="13.7517%" y="63.50"></text></g><g><title>gpredomics`core::slice::sort::stable::quicksort::quicksort (37 samples, 0.38%)</title><rect x="13.1453%" y="117" width="0.3767%" height="15" fill="rgb(211,50,8)" fg:x="1291" fg:w="37"/><text x="13.3953%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="13.5119%" y="101" width="0.0102%" height="15" fill="rgb(245,182,24)" fg:x="1327" fg:w="1"/><text x="13.7619%" y="111.50"></text></g><g><title>gpredomics`core::slice::sort::stable::quicksort::quicksort (70 samples, 0.71%)</title><rect x="12.8297%" y="133" width="0.7128%" height="15" fill="rgb(242,14,37)" fg:x="1260" fg:w="70"/><text x="13.0797%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="13.5220%" y="117" width="0.0204%" height="15" fill="rgb(246,228,12)" fg:x="1328" fg:w="2"/><text x="13.7720%" y="127.50"></text></g><g><title>gpredomics`core::slice::sort::stable::quicksort::quicksort (94 samples, 0.96%)</title><rect x="12.6158%" y="149" width="0.9571%" height="15" fill="rgb(213,55,15)" fg:x="1239" fg:w="94"/><text x="12.8658%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.03%)</title><rect x="13.5424%" y="133" width="0.0305%" height="15" fill="rgb(209,9,3)" fg:x="1330" fg:w="3"/><text x="13.7924%" y="143.50"></text></g><g><title>gpredomics`core::slice::sort::stable::driftsort_main (121 samples, 1.23%)</title><rect x="12.3714%" y="165" width="1.2321%" height="15" fill="rgb(230,59,30)" fg:x="1215" fg:w="121"/><text x="12.6214%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.03%)</title><rect x="13.5730%" y="149" width="0.0305%" height="15" fill="rgb(209,121,21)" fg:x="1333" fg:w="3"/><text x="13.8230%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.02%)</title><rect x="13.6035%" y="165" width="0.0204%" height="15" fill="rgb(220,109,13)" fg:x="1336" fg:w="2"/><text x="13.8535%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.02%)</title><rect x="13.6239%" y="165" width="0.0204%" height="15" fill="rgb(232,18,1)" fg:x="1338" fg:w="2"/><text x="13.8739%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.01%)</title><rect x="13.6340%" y="149" width="0.0102%" height="15" fill="rgb(215,41,42)" fg:x="1339" fg:w="1"/><text x="13.8840%" y="159.50"></text></g><g><title>gpredomics`gpredomics::individual::Individual::compute_auc_from_value (203 samples, 2.07%)</title><rect x="11.5976%" y="181" width="2.0670%" height="15" fill="rgb(224,123,36)" fg:x="1139" fg:w="203"/><text x="11.8476%" y="191.50">g..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="13.6442%" y="165" width="0.0204%" height="15" fill="rgb(240,125,3)" fg:x="1340" fg:w="2"/><text x="13.8942%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.02%)</title><rect x="13.6442%" y="149" width="0.0204%" height="15" fill="rgb(205,98,50)" fg:x="1340" fg:w="2"/><text x="13.8942%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.02%)</title><rect x="13.6442%" y="133" width="0.0204%" height="15" fill="rgb(205,185,37)" fg:x="1340" fg:w="2"/><text x="13.8942%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.01%)</title><rect x="13.6544%" y="117" width="0.0102%" height="15" fill="rgb(238,207,15)" fg:x="1341" fg:w="1"/><text x="13.9044%" y="127.50"></text></g><g><title>gpredomics`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,774 samples, 58.79%)</title><rect x="24.2745%" y="165" width="58.7924%" height="15" fill="rgb(213,199,42)" fg:x="2384" fg:w="5774"/><text x="24.5245%" y="175.50">gpredomics`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="83.1484%" y="85" width="0.0204%" height="15" fill="rgb(235,201,11)" fg:x="8166" fg:w="2"/><text x="83.3984%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.01%)</title><rect x="83.1789%" y="69" width="0.0102%" height="15" fill="rgb(207,46,11)" fg:x="8169" fg:w="1"/><text x="83.4289%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.04%)</title><rect x="83.1687%" y="85" width="0.0407%" height="15" fill="rgb(241,35,35)" fg:x="8168" fg:w="4"/><text x="83.4187%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="83.1891%" y="69" width="0.0204%" height="15" fill="rgb(243,32,47)" fg:x="8170" fg:w="2"/><text x="83.4391%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.01%)</title><rect x="83.1993%" y="53" width="0.0102%" height="15" fill="rgb(247,202,23)" fg:x="8171" fg:w="1"/><text x="83.4493%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (9 samples, 0.09%)</title><rect x="83.1280%" y="101" width="0.0916%" height="15" fill="rgb(219,102,11)" fg:x="8164" fg:w="9"/><text x="83.3780%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.01%)</title><rect x="83.2094%" y="85" width="0.0102%" height="15" fill="rgb(243,110,44)" fg:x="8172" fg:w="1"/><text x="83.4594%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.01%)</title><rect x="83.2298%" y="85" width="0.0102%" height="15" fill="rgb(222,74,54)" fg:x="8174" fg:w="1"/><text x="83.4798%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="83.2400%" y="37" width="0.0102%" height="15" fill="rgb(216,99,12)" fg:x="8175" fg:w="1"/><text x="83.4900%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="83.2400%" y="85" width="0.0204%" height="15" fill="rgb(226,22,26)" fg:x="8175" fg:w="2"/><text x="83.4900%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.02%)</title><rect x="83.2400%" y="69" width="0.0204%" height="15" fill="rgb(217,163,10)" fg:x="8175" fg:w="2"/><text x="83.4900%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.02%)</title><rect x="83.2400%" y="53" width="0.0204%" height="15" fill="rgb(213,25,53)" fg:x="8175" fg:w="2"/><text x="83.4900%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.01%)</title><rect x="83.2502%" y="37" width="0.0102%" height="15" fill="rgb(252,105,26)" fg:x="8176" fg:w="1"/><text x="83.5002%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.05%)</title><rect x="83.2196%" y="101" width="0.0509%" height="15" fill="rgb(220,39,43)" fg:x="8173" fg:w="5"/><text x="83.4696%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.01%)</title><rect x="83.2604%" y="85" width="0.0102%" height="15" fill="rgb(229,68,48)" fg:x="8177" fg:w="1"/><text x="83.5104%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.01%)</title><rect x="83.2604%" y="69" width="0.0102%" height="15" fill="rgb(252,8,32)" fg:x="8177" fg:w="1"/><text x="83.5104%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (20 samples, 0.20%)</title><rect x="83.1076%" y="117" width="0.2036%" height="15" fill="rgb(223,20,43)" fg:x="8162" fg:w="20"/><text x="83.3576%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.04%)</title><rect x="83.2705%" y="101" width="0.0407%" height="15" fill="rgb(229,81,49)" fg:x="8178" fg:w="4"/><text x="83.5205%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.01%)</title><rect x="83.3113%" y="117" width="0.0102%" height="15" fill="rgb(236,28,36)" fg:x="8182" fg:w="1"/><text x="83.5613%" y="127.50"></text></g><g><title>gpredomics`alloc::raw_vec::finish_grow (26 samples, 0.26%)</title><rect x="83.0771%" y="149" width="0.2647%" height="15" fill="rgb(249,185,26)" fg:x="8159" fg:w="26"/><text x="83.3271%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (25 samples, 0.25%)</title><rect x="83.0873%" y="133" width="0.2546%" height="15" fill="rgb(249,174,33)" fg:x="8160" fg:w="25"/><text x="83.3373%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.02%)</title><rect x="83.3215%" y="117" width="0.0204%" height="15" fill="rgb(233,201,37)" fg:x="8183" fg:w="2"/><text x="83.5715%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.02%)</title><rect x="83.3215%" y="101" width="0.0204%" height="15" fill="rgb(221,78,26)" fg:x="8183" fg:w="2"/><text x="83.5715%" y="111.50"></text></g><g><title>gpredomics`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (28 samples, 0.29%)</title><rect x="83.0669%" y="165" width="0.2851%" height="15" fill="rgb(250,127,30)" fg:x="8158" fg:w="28"/><text x="83.3169%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.01%)</title><rect x="83.3418%" y="149" width="0.0102%" height="15" fill="rgb(230,49,44)" fg:x="8185" fg:w="1"/><text x="83.5918%" y="159.50"></text></g><g><title>gpredomics`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="83.3520%" y="165" width="0.0102%" height="15" fill="rgb(229,67,23)" fg:x="8186" fg:w="1"/><text x="83.6020%" y="175.50"></text></g><g><title>gpredomics`gpredomics::individual::Individual::evaluate (8,438 samples, 85.92%)</title><rect x="13.6646%" y="181" width="85.9179%" height="15" fill="rgb(249,83,47)" fg:x="1342" fg:w="8438"/><text x="13.9146%" y="191.50">gpredomics`gpredomics::individual::Individual::evaluate</text></g><g><title>gpredomics`core::hash::BuildHasher::hash_one (1,593 samples, 16.22%)</title><rect x="83.3622%" y="165" width="16.2203%" height="15" fill="rgb(215,43,3)" fg:x="8187" fg:w="1593"/><text x="83.6122%" y="175.50">gpredomics`core::hash::Bu..</text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.01%)</title><rect x="99.5825%" y="181" width="0.0102%" height="15" fill="rgb(238,154,13)" fg:x="9780" fg:w="1"/><text x="99.8325%" y="191.50"></text></g><g><title>gpredomics`gpredomics::population::Population::evaluate_with_k_penalty (9,488 samples, 96.61%)</title><rect x="2.9936%" y="197" width="96.6093%" height="15" fill="rgb(219,56,2)" fg:x="294" fg:w="9488"/><text x="3.2436%" y="207.50">gpredomics`gpredomics::population::Population::evaluate_with_k_penalty</text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.01%)</title><rect x="99.5927%" y="181" width="0.0102%" height="15" fill="rgb(233,0,4)" fg:x="9781" fg:w="1"/><text x="99.8427%" y="191.50"></text></g><g><title>gpredomics`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="99.6436%" y="165" width="0.0102%" height="15" fill="rgb(235,30,7)" fg:x="9786" fg:w="1"/><text x="99.8936%" y="175.50"></text></g><g><title>gpredomics`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.06%)</title><rect x="99.6029%" y="197" width="0.0611%" height="15" fill="rgb(250,79,13)" fg:x="9782" fg:w="6"/><text x="99.8529%" y="207.50"></text></g><g><title>gpredomics`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.04%)</title><rect x="99.6233%" y="181" width="0.0407%" height="15" fill="rgb(211,146,34)" fg:x="9784" fg:w="4"/><text x="99.8733%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.01%)</title><rect x="99.6538%" y="165" width="0.0102%" height="15" fill="rgb(228,22,38)" fg:x="9787" fg:w="1"/><text x="99.9038%" y="175.50"></text></g><g><title>gpredomics`rand_core::block::BlockRng&lt;R&gt;::generate_and_set (12 samples, 0.12%)</title><rect x="99.6640%" y="197" width="0.1222%" height="15" fill="rgb(235,168,5)" fg:x="9788" fg:w="12"/><text x="99.9140%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.01%)</title><rect x="99.7862%" y="197" width="0.0102%" height="15" fill="rgb(221,155,16)" fg:x="9800" fg:w="1"/><text x="100.0362%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="99.7964%" y="197" width="0.0102%" height="15" fill="rgb(215,215,53)" fg:x="9801" fg:w="1"/><text x="100.0464%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.01%)</title><rect x="99.8065%" y="197" width="0.0102%" height="15" fill="rgb(223,4,10)" fg:x="9802" fg:w="1"/><text x="100.0565%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="99.8065%" y="181" width="0.0102%" height="15" fill="rgb(234,103,6)" fg:x="9802" fg:w="1"/><text x="100.0565%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.01%)</title><rect x="99.8167%" y="197" width="0.0102%" height="15" fill="rgb(227,97,0)" fg:x="9803" fg:w="1"/><text x="100.0667%" y="207.50"></text></g><g><title>gpredomics`gpredomics::ga::ga (9,766 samples, 99.44%)</title><rect x="0.4887%" y="213" width="99.4400%" height="15" fill="rgb(234,150,53)" fg:x="48" fg:w="9766"/><text x="0.7387%" y="223.50">gpredomics`gpredomics::ga::ga</text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.10%)</title><rect x="99.8269%" y="197" width="0.1018%" height="15" fill="rgb(228,201,54)" fg:x="9804" fg:w="10"/><text x="100.0769%" y="207.50"></text></g><g><title>gpredomics`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.01%)</title><rect x="99.9287%" y="213" width="0.0102%" height="15" fill="rgb(222,22,37)" fg:x="9814" fg:w="1"/><text x="100.1787%" y="223.50"></text></g><g><title>gpredomics`std::io::stdio::_print (2 samples, 0.02%)</title><rect x="99.9389%" y="213" width="0.0204%" height="15" fill="rgb(237,53,32)" fg:x="9815" fg:w="2"/><text x="100.1889%" y="223.50"></text></g><g><title>gpredomics`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (2 samples, 0.02%)</title><rect x="99.9389%" y="197" width="0.0204%" height="15" fill="rgb(233,25,53)" fg:x="9815" fg:w="2"/><text x="100.1889%" y="207.50"></text></g><g><title>gpredomics`core::fmt::write (2 samples, 0.02%)</title><rect x="99.9389%" y="181" width="0.0204%" height="15" fill="rgb(210,40,34)" fg:x="9815" fg:w="2"/><text x="100.1889%" y="191.50"></text></g><g><title>gpredomics`&lt;gpredomics::data::Data as core::fmt::Debug&gt;::fmt (2 samples, 0.02%)</title><rect x="99.9389%" y="165" width="0.0204%" height="15" fill="rgb(241,220,44)" fg:x="9815" fg:w="2"/><text x="100.1889%" y="175.50"></text></g><g><title>gpredomics`core::fmt::write (2 samples, 0.02%)</title><rect x="99.9389%" y="149" width="0.0204%" height="15" fill="rgb(235,28,35)" fg:x="9815" fg:w="2"/><text x="100.1889%" y="159.50"></text></g><g><title>gpredomics`&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.02%)</title><rect x="99.9389%" y="133" width="0.0204%" height="15" fill="rgb(210,56,17)" fg:x="9815" fg:w="2"/><text x="100.1889%" y="143.50"></text></g><g><title>gpredomics`core::fmt::write (1 samples, 0.01%)</title><rect x="99.9491%" y="117" width="0.0102%" height="15" fill="rgb(224,130,29)" fg:x="9816" fg:w="1"/><text x="100.1991%" y="127.50"></text></g><g><title>gpredomics`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.01%)</title><rect x="99.9491%" y="101" width="0.0102%" height="15" fill="rgb(235,212,8)" fg:x="9816" fg:w="1"/><text x="100.1991%" y="111.50"></text></g><g><title>gpredomics`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.01%)</title><rect x="99.9491%" y="85" width="0.0102%" height="15" fill="rgb(223,33,50)" fg:x="9816" fg:w="1"/><text x="100.1991%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.01%)</title><rect x="99.9491%" y="69" width="0.0102%" height="15" fill="rgb(219,149,13)" fg:x="9816" fg:w="1"/><text x="100.1991%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.01%)</title><rect x="99.9593%" y="213" width="0.0102%" height="15" fill="rgb(250,156,29)" fg:x="9817" fg:w="1"/><text x="100.2093%" y="223.50"></text></g><g><title>dyld`start (9,819 samples, 99.98%)</title><rect x="0.0000%" y="309" width="99.9796%" height="15" fill="rgb(216,193,19)" fg:x="0" fg:w="9819"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>gpredomics`main (9,819 samples, 99.98%)</title><rect x="0.0000%" y="293" width="99.9796%" height="15" fill="rgb(216,135,14)" fg:x="0" fg:w="9819"/><text x="0.2500%" y="303.50">gpredomics`main</text></g><g><title>gpredomics`std::rt::lang_start_internal (9,819 samples, 99.98%)</title><rect x="0.0000%" y="277" width="99.9796%" height="15" fill="rgb(241,47,5)" fg:x="0" fg:w="9819"/><text x="0.2500%" y="287.50">gpredomics`std::rt::lang_start_internal</text></g><g><title>gpredomics`std::rt::lang_start::_{{closure}} (9,819 samples, 99.98%)</title><rect x="0.0000%" y="261" width="99.9796%" height="15" fill="rgb(233,42,35)" fg:x="0" fg:w="9819"/><text x="0.2500%" y="271.50">gpredomics`std::rt::lang_start::_{{closure}}</text></g><g><title>gpredomics`std::sys::backtrace::__rust_begin_short_backtrace (9,819 samples, 99.98%)</title><rect x="0.0000%" y="245" width="99.9796%" height="15" fill="rgb(231,13,6)" fg:x="0" fg:w="9819"/><text x="0.2500%" y="255.50">gpredomics`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>gpredomics`gpredomics::main (9,819 samples, 99.98%)</title><rect x="0.0000%" y="229" width="99.9796%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="9819"/><text x="0.2500%" y="239.50">gpredomics`gpredomics::main</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (1 samples, 0.01%)</title><rect x="99.9695%" y="213" width="0.0102%" height="15" fill="rgb(254,173,49)" fg:x="9818" fg:w="1"/><text x="100.2195%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.01%)</title><rect x="99.9695%" y="197" width="0.0102%" height="15" fill="rgb(221,1,38)" fg:x="9818" fg:w="1"/><text x="100.2195%" y="207.50"></text></g><g><title>all (9,821 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(206,124,46)" fg:x="0" fg:w="9821"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.02%)</title><rect x="99.9796%" y="309" width="0.0204%" height="15" fill="rgb(249,21,11)" fg:x="9819" fg:w="2"/><text x="100.2296%" y="319.50"></text></g></svg></svg>